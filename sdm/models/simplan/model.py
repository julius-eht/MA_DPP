# generated by datamodel-codegen:
#   filename:  20231106_101553_JSONSchema.json
#   timestamp: 2023-11-07T00:46:59+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field


class Settings(BaseModel):
    simulationStartDate: str = Field(
        ...,
        description="Start date of the simulation (ISO 8601).<br>Should be specified as UTC at midnight (00:00:00Z).",
        title="simulationStartDate",
    )
    simulationEndDate: str = Field(
        ...,
        description="End date of the simulation (ISO 8601).<br>Should be specified as UTC at midnight (00:00:00Z).",
        title="simulationEndDate",
    )
    initialStatsOffsetInHours: float = Field(
        ...,
        description="Initial offset in hours after which the stats will be recorded.",
        title="initialStatsOffsetInHours",
    )
    simulationApiVersion: str = Field(
        ...,
        description="API version of the backend simulation model",
        title="simulationApiVersion",
    )
    userLanguage: str = Field(
        ...,
        description="Current language of the user (two-letter language code)",
        title="userLanguage",
    )
    randomNumbersVariant: float = Field(
        ...,
        description="Random seed to initialize the pseudorandom number generator.",
        title="randomNumbersVariant",
    )


class Flip(BaseModel):
    flipY: bool = Field(
        ...,
        description="Flag if this icon should be flipped vertically.",
        title="flipY",
    )
    flipX: bool = Field(
        ...,
        description="Flag if this icon should be flipped horizontally.",
        title="flipX",
    )


class ImageTransform(BaseModel):
    flip: Optional[Flip] = Field(None, description="Image flip options", title="flip")
    scale: Optional[float] = Field(
        None, description="Scale of the image. Default scale is 1.", title="scale"
    )
    angle: Optional[float] = Field(
        None,
        description="The rotation angle of the image (Value between 0 and 360)",
        title="angle",
    )


class ParameterTableLayout(BaseModel):
    labelColumnWidth: Optional[float] = Field(
        None, description="The width of the label column", title="labelColumnWidth"
    )
    valueColumnWidth: Optional[float] = Field(
        None, description="The width of the value column", title="valueColumnWidth"
    )


class AbstractParameter(BaseModel):
    type: str = Field(..., description="Data type of the parameter", title="type")
    value: Optional[Any] = Field(
        None, description="Value of the parameter", title="value"
    )
    class_: str = Field(
        ...,
        alias="class",
        description="Identifier for the parameter, used to find the parameter definition in the toolbox",
        title="class",
    )


class AbstractNodeItem(BaseModel):
    parameters: List[AbstractParameter,] = Field(..., title="parameters")
    key: float = Field(..., description="The unique key of the node", title="key")
    loc: str = Field(
        ...,
        description='The location of the node in the diagram.<br>Format of this property is the x-coordinate, a space, and then the y-coordinate (e.g. "0 0" or "-200 400").<br>Increasing values of x are going rightwards and increasing values of y are going downwards.',
        title="loc",
    )
    category: str = Field(
        "item",
        const=True,
        description="Specifies the category, used for determining the visual template to use.",
        title="category",
    )
    nodeName: str = Field(
        ..., description="The (unique) name of the item", title="nodeName"
    )
    class_: str = Field(
        ...,
        alias="class",
        description="Specifies a unique identifier which describes the current node type (e.g. process, store or customer).",
        title="class",
    )
    photoNames: List[str] = Field(
        ..., description="File names of the attached photos", title="photoNames"
    )
    imageClass: Optional[str] = Field(
        None,
        description="Identifier for determining the node icon from the toolbox to be used.",
        title="imageClass",
    )
    imageTransform: Optional[ImageTransform] = Field(
        None,
        description="Transformation options for the node icon.",
        title="imageTransform",
    )
    parameterTableLayout: Optional[ParameterTableLayout] = Field(
        None,
        description="Layout options for the parameter table",
        title="parameterTableLayout",
    )

    def __hash__(self) -> int:
        return hash(self.key)


class NodeDataArray(BaseModel):
    __root__: List[AbstractNodeItem] = Field(..., title="nodeDataArray")


class Category(Enum):
    item = "item"


class FromPort(Enum):
    B = "B"
    L = "L"
    R = "R"
    T = "T"


class ToPort(Enum):
    B = "B"
    L = "L"
    R = "R"
    T = "T"


class Stroke(BaseModel):
    dashStyle: Optional[str] = Field(
        None, description="The name of the dash style", title="dashStyle"
    )


class Class(Enum):
    trsp_route_conn = "trsp_route_conn"
    direct_conn = "direct_conn"


class LinkDataArrayItem(BaseModel):
    category: Category = Field(
        ..., description="The category of the link", title="category"
    )
    fromPort: FromPort = Field(
        ..., description="Name of the port on the source node", title="fromPort"
    )
    toPort: ToPort = Field(
        ..., description="The port on the target node", title="toPort"
    )
    text: Optional[str] = Field(
        None, description="Text/description of the link", title="text"
    )
    textLocation: Optional[str] = Field(
        None, description="Location of the link text", title="textLocation"
    )
    routingBehaviour: Optional[str] = Field(
        None,
        description="Behaviour how the link route should be",
        title="routingBehaviour",
    )
    points: Optional[List[float]] = Field(
        None, description="Points of the link route", title="points"
    )
    stroke: Optional[Stroke] = Field(
        None, description="Properties for the stroke of a link", title="stroke"
    )
    comment: Optional[str] = Field(
        None, description="Text/comment of the link", title="comment"
    )
    class_: Class = Field(
        ..., alias="class", description="The class of the link", title="class"
    )
    from_: Optional[float] = Field(
        None, alias="from", description="The ID of the source node", title="from"
    )
    to: Optional[float] = Field(
        None, description="The ID of the target node", title="to"
    )


class LinkDataArray(BaseModel):
    __root__: List[LinkDataArrayItem] = Field(..., title="linkDataArray")


class Model(BaseModel):
    nodeDataArray: NodeDataArray = Field(..., description="List of nodes in this model")
    linkDataArray: LinkDataArray = Field(..., description="List of links in this model")


class Alternative(BaseModel):
    model: Model = Field(..., description="Model to be simulated", title="model")
    id: float = Field(..., description="ID of the alternative", title="id")
    name: str = Field(..., description="Name of the alternative", title="name")


class SimulationJob(BaseModel):
    alternatives: List[Alternative] = Field(
        ...,
        description="The alternative to be simulated.<br>This is an array, however it should currently contain only a single alternative.",
        title="alternatives",
    )
    id: float = Field(
        ..., description="ID of the project this simulation job belongs to", title="id"
    )
    name: str = Field(..., description="Name of the project", title="name")
    settings: Settings = Field(
        ..., description="Various settings for the simulation run", title="settings"
    )


class SimJSON(BaseModel):
    simulation_job: SimulationJob = Field(
        ...,
        alias="simulationJob",
        description="The simulation job to be executed",
        title="simulation_job",
    )
